depth first search
recursive
marked = [False] * G.size()
def dfs(G,v):
	visit(v)
	marked[v] = True
	for w in G.neighbors(v):
		if not marked[w]
		dfs(G,w)



iterative
marked = [False] * G.size()
def dfs_iter(G,v):
	stack =[v]
	while len(stack) > 0:
		v = stack.pop()
		if not marked[v]:
			visit(v)
			marked[v] = True
			for w in G.neighbors(v):
				if not marked[w]
				stack.append(w)


Breath first search 
recursive
marked = [False] * G.size()
def bfs(G,v):
	queue = [v]
	while len(queue) > 0:
		v =queue.pop(0)
		if not marked[v]:
			visit(v)
			marked[v] = True
			for w in G.neighbors(v):
				if not marked[w]
				queue.append(w)

